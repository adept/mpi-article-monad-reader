--- plain.hs	2011-08-04 23:12:39.000000000 +0100
+++ threaded.hs	2011-08-05 20:02:27.000000000 +0100
@@ -1,6 +1,10 @@
 module Main where
 
-approx f xs ws = sum [w * f x | (x,w) <- zip xs ws]
+import Control.Parallel.Strategies
+
+u2 = parBuffer 2 rseq
+
+approx f xs ws = sum ( [w * f x | (x,w) <- zip xs ws] )
  
 integrateOpen :: Fractional a => a -> [a] -> (a -> a) -> a -> a -> Int -> a
 integrateOpen v vs f a b n = approx f xs ws * h / v where
@@ -8,7 +12,7 @@
   h = (b-a) / fromIntegral m
   ws = concat $ replicate n vs
   c = a + h/2
-  xs = [c + h * fromIntegral i | i <- [0..m-1]]
+  xs = [c + h * fromIntegral i | i <- [0..m-1]] `using` u2
  
 integrateClosed :: Fractional a => a -> [a] -> (a -> a) -> a -> a -> Int -> a
 integrateClosed v vs f a b n = approx f xs ws * h / v where
@@ -44,7 +48,7 @@
 -- Integrate f on [a,b] with n steps using all available methods, print results
 tabulate :: Fractional a => (a->a) -> a -> a -> Int -> [String]
 tabulate f a b n =
-  map (\(name, method) -> name ++ (show $ method f a b n)) methods
+  map (\(name, method) -> name ++ (show $ method f a b n)) methods --`using` parList rdeepseq
 
 -- Integrate several sample functions
 tabulateSeveral =
@@ -53,7 +57,8 @@
   , ((\x -> 1 / x), 1, 100 , 1000000)  
   , ((\x -> x)    , 0, 5000, 5000000)
   , ((\x -> x)    , 0, 6000, 6000000)
-  ]
+  ] -- `using` parList rdeepseq
+  -- We could parallelize tablulare or tabulateSeveral, but not both at once
   where
     uncurry4 f (a,b,c,d) = f a b c d
   
